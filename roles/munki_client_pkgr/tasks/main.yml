---
# munki_pkgr/tasks/main.yml

# creates a minimal but functional munki.pkg for clients
# including ManagedInstalls.plsit pointing at newly created repo

- name: check client pkg_dir exists
  stat: path={{ pkg_path }}
  register: pkg_dir_exists

- name: create client pkg_dir
  command: "/bin/mkdir -p {{ pkg_path }}/Library/Preferences"
  when: pkg_dir_exists.stat.exists == false

- name: create empty ManagedInstalls.plist
  file: path={{ plist_path }} state=touch mode=0644 owner=root group=wheel

- name: write minimum ManagedInstalls.plist
  command: '{{ default_write }} {{ plist_path }} {{ item.pref }}'
  with_items:
    - { pref: '"SoftwareRepoURL" -string "{{ SoftwareRepoURL }}"' }
#    - { pref: '"CurlPath" -string "/usr/local/bin/curl"' }
#    - { pref: '"(key)" -type "(value)"' }

# need to package up brew's curl and copy to {{ pkg_path }}
# curl binary compiled --with-openssl
##############
#- name: install curl --with-openssl via homebrew
#  brew_package: curl
#  brew_opts: with-openssl
#
#- name: copy curl bits into {{ pkg_path }}
#  copy: src={{ item.orig }} dest={{ item.new }}
#  with_items:
#    - { orig: '/usr/local/bin/curl' , new: '{{ pkg_path }}/usr/local/bin/curl' }
#    - { orig: '' , new: '{{ pkg_path }}' }
#    - { orig: '' , new: '{{ pkg_path }}' }
#    - { orig: '' , new: '{{ pkg_path }}' }
#    - { orig: '' , new: '{{ pkg_path }}' }
##############

- include: sal.yml
  when: use_sal == true

- include: facter.yml
  when: use_facter == true

# should also be setting a version with --version but what:  $date?  {{ version }}?
- name: create client pkg and copy to top-level of the repo
  command: '/usr/bin/pkgbuild --identifier com.github.osxc.munki_client_pkgr.pkg --root {{ pkg_path }} {{ munki_repo }}/munki_client.pkg'
